/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\´úÂë\\Eclipse¹¤³Ì\\Antlr2\\MyElang.g
 *     -                            On : 2016-03-13 21:01:06
 *     -                for the parser : MyElangParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
MyElangParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMyElangParser, which is returned from a call to MyElangParserNew().
 *
 * The methods in pMyElangParser are  as follows:
 *
 *  - 
 MyElangParser_start_rule_return
      pMyElangParser->start_rule(pMyElangParser)
 *  - 
 MyElangParser_sql_command_return
      pMyElangParser->sql_command(pMyElangParser)
 *  - 
 MyElangParser_create_table_command_return
      pMyElangParser->create_table_command(pMyElangParser)
 *  - 
 MyElangParser_create_columns_clause_return
      pMyElangParser->create_columns_clause(pMyElangParser)
 *  - 
 MyElangParser_insert_command_return
      pMyElangParser->insert_command(pMyElangParser)
 *  - 
 MyElangParser_insert_columns_return
      pMyElangParser->insert_columns(pMyElangParser)
 *  - 
 MyElangParser_insert_value_return
      pMyElangParser->insert_value(pMyElangParser)
 *  - 
 MyElangParser_delete_command_return
      pMyElangParser->delete_command(pMyElangParser)
 *  - 
 MyElangParser_select_command_return
      pMyElangParser->select_command(pMyElangParser)
 *  - 
 MyElangParser_update_command_return
      pMyElangParser->update_command(pMyElangParser)
 *  - 
 MyElangParser_update_column_specs_return
      pMyElangParser->update_column_specs(pMyElangParser)
 *  - 
 MyElangParser_update_column_return
      pMyElangParser->update_column(pMyElangParser)
 *  - 
 MyElangParser_table_reference_list_return
      pMyElangParser->table_reference_list(pMyElangParser)
 *  - 
 MyElangParser_column_specs_return
      pMyElangParser->column_specs(pMyElangParser)
 *  - 
 MyElangParser_displayed_column_return
      pMyElangParser->displayed_column(pMyElangParser)
 *  - 
 MyElangParser_column_name_return
      pMyElangParser->column_name(pMyElangParser)
 *  - 
 MyElangParser_aggregate_function_return
      pMyElangParser->aggregate_function(pMyElangParser)
 *  - 
 MyElangParser_alias_return
      pMyElangParser->alias(pMyElangParser)
 *  - 
 MyElangParser_table_spec_return
      pMyElangParser->table_spec(pMyElangParser)
 *  - 
 MyElangParser_schema_name_return
      pMyElangParser->schema_name(pMyElangParser)
 *  - 
 MyElangParser_table_name_return
      pMyElangParser->table_name(pMyElangParser)
 *  - 
 MyElangParser_where_clause_return
      pMyElangParser->where_clause(pMyElangParser)
 *  - 
 MyElangParser_sql_condition_return
      pMyElangParser->sql_condition(pMyElangParser)
 *  - 
 MyElangParser_condition_or_return
      pMyElangParser->condition_or(pMyElangParser)
 *  - 
 MyElangParser_condition_and_return
      pMyElangParser->condition_and(pMyElangParser)
 *  - 
 MyElangParser_condition_not_return
      pMyElangParser->condition_not(pMyElangParser)
 *  - 
 MyElangParser_condition_expr_return
      pMyElangParser->condition_expr(pMyElangParser)
 *  - 
 MyElangParser_condition_comparison_return
      pMyElangParser->condition_comparison(pMyElangParser)
 *  - 
 MyElangParser_nomal_value_return
      pMyElangParser->nomal_value(pMyElangParser)
 *  - 
 MyElangParser_condition_between_return
      pMyElangParser->condition_between(pMyElangParser)
 *  - 
 MyElangParser_condition_is_empty_return
      pMyElangParser->condition_is_empty(pMyElangParser)
 *  - 
 MyElangParser_order_by_clause_return
      pMyElangParser->order_by_clause(pMyElangParser)
 *  - 
 MyElangParser_constraint_return
      pMyElangParser->constraint(pMyElangParser)
 *  - 
 MyElangParser_primary_constraint_return
      pMyElangParser->primary_constraint(pMyElangParser)
 *  - 
 MyElangParser_foreign_key_constraint_return
      pMyElangParser->foreign_key_constraint(pMyElangParser)
 *  - 
 MyElangParser_check_constraint_return
      pMyElangParser->check_constraint(pMyElangParser)
 *  - 
 MyElangParser_data_type_return
      pMyElangParser->data_type(pMyElangParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MyElangParser_H
#define _MyElangParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MyElangParser_Ctx_struct MyElangParser, * pMyElangParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct MyElangParser_start_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_start_rule_return;



typedef struct MyElangParser_sql_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_sql_command_return;



typedef struct MyElangParser_create_table_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_create_table_command_return;



typedef struct MyElangParser_create_columns_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_create_columns_clause_return;



typedef struct MyElangParser_insert_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_insert_command_return;



typedef struct MyElangParser_insert_columns_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_insert_columns_return;



typedef struct MyElangParser_insert_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_insert_value_return;



typedef struct MyElangParser_delete_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_delete_command_return;



typedef struct MyElangParser_select_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_select_command_return;



typedef struct MyElangParser_update_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_update_command_return;



typedef struct MyElangParser_update_column_specs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_update_column_specs_return;



typedef struct MyElangParser_update_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_update_column_return;



typedef struct MyElangParser_table_reference_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_table_reference_list_return;



typedef struct MyElangParser_column_specs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_column_specs_return;



typedef struct MyElangParser_displayed_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_displayed_column_return;



typedef struct MyElangParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_column_name_return;



typedef struct MyElangParser_aggregate_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_aggregate_function_return;



typedef struct MyElangParser_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_alias_return;



typedef struct MyElangParser_table_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_table_spec_return;



typedef struct MyElangParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_schema_name_return;



typedef struct MyElangParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_table_name_return;



typedef struct MyElangParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_where_clause_return;



typedef struct MyElangParser_sql_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_sql_condition_return;



typedef struct MyElangParser_condition_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_or_return;



typedef struct MyElangParser_condition_and_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_and_return;



typedef struct MyElangParser_condition_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_not_return;



typedef struct MyElangParser_condition_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_expr_return;



typedef struct MyElangParser_condition_comparison_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_comparison_return;



typedef struct MyElangParser_nomal_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_nomal_value_return;



typedef struct MyElangParser_condition_between_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_between_return;



typedef struct MyElangParser_condition_is_empty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_condition_is_empty_return;



typedef struct MyElangParser_order_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_order_by_clause_return;



typedef struct MyElangParser_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_constraint_return;



typedef struct MyElangParser_primary_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_primary_constraint_return;



typedef struct MyElangParser_foreign_key_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_foreign_key_constraint_return;



typedef struct MyElangParser_check_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_check_constraint_return;



typedef struct MyElangParser_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyElangParser_data_type_return;




/** Context tracking structure for 
MyElangParser

 */
struct MyElangParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     MyElangParser_start_rule_return
     (*start_rule)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_sql_command_return
     (*sql_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_create_table_command_return
     (*create_table_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_create_columns_clause_return
     (*create_columns_clause)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_insert_command_return
     (*insert_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_insert_columns_return
     (*insert_columns)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_insert_value_return
     (*insert_value)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_delete_command_return
     (*delete_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_select_command_return
     (*select_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_update_command_return
     (*update_command)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_update_column_specs_return
     (*update_column_specs)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_update_column_return
     (*update_column)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_table_reference_list_return
     (*table_reference_list)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_column_specs_return
     (*column_specs)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_displayed_column_return
     (*displayed_column)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_column_name_return
     (*column_name)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_aggregate_function_return
     (*aggregate_function)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_alias_return
     (*alias)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_table_spec_return
     (*table_spec)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_schema_name_return
     (*schema_name)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_table_name_return
     (*table_name)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_where_clause_return
     (*where_clause)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_sql_condition_return
     (*sql_condition)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_or_return
     (*condition_or)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_and_return
     (*condition_and)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_not_return
     (*condition_not)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_expr_return
     (*condition_expr)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_comparison_return
     (*condition_comparison)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_nomal_value_return
     (*nomal_value)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_between_return
     (*condition_between)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_condition_is_empty_return
     (*condition_is_empty)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_order_by_clause_return
     (*order_by_clause)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_constraint_return
     (*constraint)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_primary_constraint_return
     (*primary_constraint)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_foreign_key_constraint_return
     (*foreign_key_constraint)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_check_constraint_return
     (*check_constraint)	(struct MyElangParser_Ctx_struct * ctx);

     MyElangParser_data_type_return
     (*data_type)	(struct MyElangParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MyElangParser_Ctx_struct * ctx);
    void	    (*free)   (struct MyElangParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMyElangParser MyElangParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pMyElangParser MyElangParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define ASTERISK      4
#define COMMA      5
#define COMMENT      6
#define DATATYPE      7
#define DOT      8
#define EQ      9
#define GEQ      10
#define GTH      11
#define ID      12
#define LEQ      13
#define LINE_COMMENT      14
#define LPAREN      15
#define LTH      16
#define MINUS      17
#define N      18
#define NOT_EQ      19
#define NUMBER      20
#define PLUS      21
#define RPAREN      22
#define WS      23
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MyElangParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
